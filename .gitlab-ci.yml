variables:
  KUBE_NAMESPACE_dev: dev
  KUBE_NAMESPACE_qa: qa
  KUBE_NAMESPACE_staging: staging
  KUBE_NAMESPACE_prod: prod
  IP_DEV: 18.201.181.178 #Remplacer par votre IP de la VM
  IP_QA: 18.201.181.178
  IP_STAGING: 18.201.181.178 #Remplacer par votre IP de la VM
  IP_PROD: 18.201.181.178 #Remplacer par votre IP de la VM
  NODEPORT_DEV: 30001
  NODEPORT_STAGING: 30002
  NODEPORT_PROD: 30003
  NODEPORT_QA: 30004

image:
  name: "python:3.11-alpine"
  entrypoint: ["/bin/sh", "-c"]

stages:
  - test
  - build
  - push
  - run
  - deploy_dev
  - deploy_qa
  - deploy_staging
  - deploy_prod


 test:
   stage: test
   image: python:latest
   script:
     - sudo apt-get update
     - cd users/
     - pip install -r requirements.txt
     - cd tests/
     - python3 -m unittest auth.py
     - python3 -m unittest fake_db.py
    # # - python3 -m unittest discover -s tests 

build_gateway:
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  stage: build
  # before_script:
  #   - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASS" "$CI_REGISTRY"
  script:
    # Build the container images
    - cd gateway/
    - docker build -t "$CI_REGISTRY_IMAGE/k-api-gateway:latest" .
    # Tag the container image from latest to the commit ref
    - docker tag "$CI_REGISTRY_IMAGE/k-api-gateway:latest" "$CI_REGISTRY_IMAGE/k-api-gateway:$CI_COMMIT_SHORT_SHA"

push_gateway:
  stage: push
  before_script:
    - docker info
    # Login to the Gitlab Container registry
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASS" "$CI_REGISTRY"
  script:
    # Push the container image
    - docker push "$CI_REGISTRY_IMAGE/k-api-gateway:$CI_COMMIT_SHORT_SHA"
    # If we are building a tag, push the `latest` container image tag too
    - if [ ! -z "$CI_COMMIT_TAG" ]; then docker push "$CI_REGISTRY_IMAGE/k-api-gateway:latest"; fi

build_users:
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  stage: build
  # before_script:
  #   - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASS" "$CI_REGISTRY"
  script:
    # Build the container image
    - cd gateway/
    - docker build -t "$CI_REGISTRY_IMAGE/k-users:latest" .
    # Tag the container image from latest to the commit ref
    - docker tag "$CI_REGISTRY_IMAGE/k-users:latest" "$CI_REGISTRY_IMAGE/k-users:$CI_COMMIT_SHORT_SHA"

push_users:
  stage: push
  before_script:
    - docker info
    # Login to the Gitlab Container registry
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASS" "$CI_REGISTRY"
  script:
    # Push the container image
    - docker push "$CI_REGISTRY_IMAGE/k-users:$CI_COMMIT_SHORT_SHA"
    # If we are building a tag, push the `latest` container image tag too
    - if [ ! -z "$CI_COMMIT_TAG" ]; then docker push "$CI_REGISTRY_IMAGE/k-users:latest"; fi

build_orders:
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  stage: build
  # before_script:
  #   - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASS" "$CI_REGISTRY"
  script:
    # Build the container image
    - cd gateway/
    - docker build -t "$CI_REGISTRY_IMAGE/k-orders:latest" .
    # Tag the container image from latest to the commit ref
    - docker tag "$CI_REGISTRY_IMAGE/k-orders:latest" "$CI_REGISTRY_IMAGE/k-orders:$CI_COMMIT_SHORT_SHA"

push_orders:
  stage: push
  before_script:
    - docker info
    # Login to the Gitlab Container registry
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASS" "$CI_REGISTRY"
  script:
    # Push the container image
    - docker push "$CI_REGISTRY_IMAGE/k-orders:$CI_COMMIT_SHORT_SHA"
    # If we are building a tag, push the `latest` container image tag too
    - if [ ! -z "$CI_COMMIT_TAG" ]; then docker push "$CI_REGISTRY_IMAGE/k-orders:latest"; fi

run_gateway:
  stage: run
  script:
    # Build the container images
    - docker run -d -p 8000:8000 --name gateway "$CI_REGISTRY_IMAGE/k-api-gateway:latest"
    - sleep 10
    - curl localhost
    - docker stop gateway
    - docker rm gateway

run_users:
  stage: run
  script:
    # Build the container images
    - docker run -d -p 8000:8000 --name users "$CI_REGISTRY_IMAGE/k-users:latest"
    - sleep 10
    - curl localhost
    - docker stop users
    - docker rm users

run_orders:
  stage: run
  script:
    # Build the container image
    - docker run -d -p 8000:8000 --name orders "$CI_REGISTRY_IMAGE/k-orders:latest"
    - sleep 10
    - curl localhost
    - docker stop orders
    - docker rm orders

deploy_dev:
  # Use the official docker image.
  image: docker:latest
  environment:
    name: dev-$CI_BUILD_REF_NAME
    url: http://$IP_DEV:$NODEPORT_DEV
    # on_stop: stop_dev
  stage: deploy_dev
  variables:
    NAMESPACE: dev

  services:
    - docker:dind
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - rm -Rf .kube
    - mkdir .kube
    - ls
    - cat $KUBE_CONFIG > .kube/config
    - cp fastapi/values.yaml values.yml
    - cat values.yml
    - sudo helm upgrade --install fastapi-chart fastapi/ --values=values.yml --namespace $NAMESPACE --set image.repository="$CI_REGISTRY_IMAGE" --set image.tag="$CI_COMMIT_SHORT_SHA" --set gatewayService.service.port="$NODEPORT_DEV"

deploy_qa:
  # Use the official docker image.
  image: docker:latest
  environment:
    name: qa-$CI_BUILD_REF_NAME
    url: http://$IP_QA:$NODEPORT_QA
    # on_stop: stop_dev
  stage: deploy_qa
  variables:
    NAMESPACE: qa

  services:
    - docker:dind
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - rm -Rf .kube
    - mkdir .kube
    - ls
    - cat $KUBE_CONFIG > .kube/config
    - cp fastapi/values.yaml values.yml
    - cat values.yml
    - sudo helm upgrade --install fastapi-chart fastapi/ --values=values.yml --namespace $NAMESPACE --set image.repository="$CI_REGISTRY_IMAGE" --set image.tag="$CI_COMMIT_SHORT_SHA" --set gatewayService.service.port="$NODEPORT_QA"

deploy_staging:
  # Use the official docker image.
  image: docker:latest
  environment:
    name: staging-$CI_BUILD_REF_NAME
    url: http://$IP_QA:$NODEPORT_STAGING
    # on_stop: stop_dev
  stage: deploy_staging
  variables:
    NAMESPACE: staging

  services:
    - docker:dind
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - rm -Rf .kube
    - mkdir .kube
    - ls
    - cat $KUBE_CONFIG > .kube/config
    - cp fastapi/values.yaml values.yml
    - cat values.yml
    - sudo helm upgrade --install fastapi-chart fastapi/ --values=values.yml --namespace $NAMESPACE --set image.repository="$CI_REGISTRY_IMAGE" --set image.tag="$CI_COMMIT_SHORT_SHA" --set gatewayService.service.port="$NODEPORT_STAGING"

deploy_prod:
  # Use the official docker image.
  image: docker:latest
  environment:
    name: prod-$CI_BUILD_REF_NAME
    url: http://$IP_QA:$NODEPORT_PROD
    # on_stop: stop_dev
  stage: deploy_prod
  variables:
    NAMESPACE: prod

  services:
    - docker:dind
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - rm -Rf .kube
    - mkdir .kube
    - ls
    - cat $KUBE_CONFIG > .kube/config
    - cp fastapi/values.yaml values.yml
    - cat values.yml
    - sudo helm upgrade --install fastapi-chart fastapi/ --values=values.yml --namespace $NAMESPACE --set image.repository="$CI_REGISTRY_IMAGE" --set image.tag="$CI_COMMIT_SHORT_SHA" --set gatewayService.service.port="$NODEPORT_PROD"
